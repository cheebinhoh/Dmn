// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/dmn-dmesg-type.proto
// Protobuf C++ Version: 6.30.0-rc1

#ifndef proto_2fdmn_2ddmesg_2dtype_2eproto_2epb_2eh
#define proto_2fdmn_2ddmesg_2dtype_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fdmn_2ddmesg_2dtype_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdmn_2ddmesg_2dtype_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fdmn_2ddmesg_2dtype_2eproto;
}  // extern "C"
namespace Dmn {
enum DMesgTypePb : int;
extern const uint32_t DMesgTypePb_internal_data_[];
}  // namespace Dmn
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::Dmn::DMesgTypePb_internal_data_>
    internal::EnumTraitsImpl::value<::Dmn::DMesgTypePb>;
}  // namespace protobuf
}  // namespace google

namespace Dmn {
enum DMesgTypePb : int {
  INVALID = 0,
  sys = 1,
  message = 5,
  DMesgTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DMesgTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t DMesgTypePb_internal_data_[];
inline constexpr DMesgTypePb DMesgTypePb_MIN =
    static_cast<DMesgTypePb>(0);
inline constexpr DMesgTypePb DMesgTypePb_MAX =
    static_cast<DMesgTypePb>(5);
inline bool DMesgTypePb_IsValid(int value) {
  return 0 <= value && value <= 5 && ((35u >> value) & 1) != 0;
}
inline constexpr int DMesgTypePb_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DMesgTypePb_descriptor();
template <typename T>
const std::string& DMesgTypePb_Name(T value) {
  static_assert(std::is_same<T, DMesgTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DMesgTypePb_Name().");
  return DMesgTypePb_Name(static_cast<DMesgTypePb>(value));
}
template <>
inline const std::string& DMesgTypePb_Name(DMesgTypePb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DMesgTypePb_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool DMesgTypePb_Parse(
    absl::string_view name, DMesgTypePb* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DMesgTypePb>(DMesgTypePb_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Dmn


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Dmn::DMesgTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::Dmn::DMesgTypePb>() {
  return ::Dmn::DMesgTypePb_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fdmn_2ddmesg_2dtype_2eproto_2epb_2eh
